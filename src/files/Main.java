/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package files;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Samuel Kunert
 * @copyright All right reserved to author!
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        clear();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathLabel = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();
        executeButton = new javax.swing.JButton();
        lastChangeLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        isHiddenLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        permissionsLabel = new javax.swing.JLabel();
        readPermissionLabel = new javax.swing.JLabel();
        writePermissionLabel = new javax.swing.JLabel();
        executePermissionLabel = new javax.swing.JLabel();
        selectButton = new javax.swing.JButton();
        sizeLabel = new javax.swing.JLabel();
        openButton = new javax.swing.JButton();
        authorLabel = new javax.swing.JLabel();
        openParentFolderButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File+");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(466, 376));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pathLabel.setText("Path");
        getContentPane().add(pathLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 80, 20));

        filePath.setToolTipText("Path of your file or folder");
        filePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathActionPerformed(evt);
            }
        });
        getContentPane().add(filePath, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 290, -1));

        executeButton.setText("Show");
        executeButton.setToolTipText("Click to show information about selected path");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(executeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 90, -1));

        lastChangeLabel.setText("last change");
        getContentPane().add(lastChangeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 320, 20));

        nameLabel.setText("name");
        getContentPane().add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 320, 20));

        isHiddenLabel.setText("is hidden");
        getContentPane().add(isHiddenLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 320, 20));

        closeButton.setText("Close");
        closeButton.setToolTipText("Quit application");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 290, 90, -1));

        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear information screen & path input row");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 70, 90, -1));

        permissionsLabel.setText("permissions");
        getContentPane().add(permissionsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 100, 20));

        readPermissionLabel.setText("read");
        getContentPane().add(readPermissionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 220, 20));

        writePermissionLabel.setText("write");
        getContentPane().add(writePermissionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 240, 220, 20));

        executePermissionLabel.setText("execute");
        getContentPane().add(executePermissionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 220, 20));

        selectButton.setText("Select...");
        selectButton.setToolTipText("Select a file or folder using File Explorer");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(selectButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 90, -1));

        sizeLabel.setText("size");
        getContentPane().add(sizeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 320, 20));

        openButton.setText("Open");
        openButton.setToolTipText("Open file or folder in Windows File Explorer");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        getContentPane().add(openButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 290, 90, -1));

        authorLabel.setText("author");
        getContentPane().add(authorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 320, 20));

        openParentFolderButton.setText("Open folder");
        openParentFolderButton.setToolTipText("Open parent folder of file");
        openParentFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openParentFolderButtonActionPerformed(evt);
            }
        });
        getContentPane().add(openParentFolderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, 90, -1));

        getAccessibleContext().setAccessibleDescription("");

        setBounds(0, 0, 466, 376);
    }// </editor-fold>//GEN-END:initComponents

    private void filePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        showInfo();
    }//GEN-LAST:event_executeButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select a file");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int result = chooser.showOpenDialog(this);

        if(result == JFileChooser.APPROVE_OPTION) {
            File select = chooser.getSelectedFile();
            filePath.setText(select.getPath());
            showInfo();
            System.out.println("Selected: " + select.getPath());
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if(!Desktop.isDesktopSupported()){
            System.out.println("Desktop is not supported!");
            return;
        }
        String path = filePath.getText();
        if(path == null || path.isEmpty()){
            JOptionPane.showMessageDialog(null, "There is nothing to show.", "Empty input", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        File file = new File(path);
        if(file.exists()){
            try {
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "An error occured while opening file...", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "File does not exist!", "Error!", JOptionPane.ERROR_MESSAGE);
            clear();
        }
        
    }//GEN-LAST:event_openButtonActionPerformed

    private void openParentFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openParentFolderButtonActionPerformed
        if(!Desktop.isDesktopSupported()){
            System.out.println("Desktop is not supported!");
            return;
        }
        String path = filePath.getText();
        if(path == null || path.isEmpty()){
            JOptionPane.showMessageDialog(null, "There is nothing to show.", "Empty input", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        File file = new File(path);
        if(file.exists()){
            try {
                if(file.isDirectory()){
                    Desktop.getDesktop().open(file);
                }else{
                    Desktop.getDesktop().open(file.getParentFile());
                }
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "An error occured while opening file...", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Folder does not exist!", "Error!", JOptionPane.ERROR_MESSAGE);
            clear();
        }
    }//GEN-LAST:event_openParentFolderButtonActionPerformed

    private void showInfo(){
        String path = filePath.getText();
        if(path == null || path.isEmpty()){
            JOptionPane.showMessageDialog(null, "There is nothing to show.", "Empty input", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        File file = new File(path);
        if(file.exists()){
            nameLabel.setText((file.isFile() ? "File" : "Folder") + " name: " + file.getName());
            lastChangeLabel.setText("Last change: " + getTimeFormatted(file.lastModified(), "dd.MM.yyyy HH:mm:ss"));
            if(file.isFile()){
                sizeLabel.setText("Size: " + getSizeFormatted(file.length()));
            }else if(file.isDirectory()){
                sizeLabel.setText("Size: " + getSizeFormatted(getFolderSize(file)));
            }else{
                sizeLabel.setText("Size: unknown");
            }
            try {
                authorLabel.setText("Author: " + Files.getOwner(file.toPath()));
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                authorLabel.setText("Author: unknown");
            }
            isHiddenLabel.setText("Is hidden? " + (file.isHidden() ? "yes" : "no"));
            permissionsLabel.setText("Permissions:");
            readPermissionLabel.setText("Read: " + (file.canRead() ? "allowed" : "disallowed"));
            writePermissionLabel.setText("Write: " + (file.canWrite()? "allowed" : "disallowed"));
            executePermissionLabel.setText("Execute: " + (file.canExecute()? "allowed" : "disallowed"));
            
        }else{
            JOptionPane.showMessageDialog(null, "File does not exist!", "Error!", JOptionPane.ERROR_MESSAGE);
            clear();
        }
    }
    
    private String getTimeFormatted(long millis, String format) {
        Date date = new Date(millis);
        DateFormat formatter = new SimpleDateFormat(format);
        return formatter.format(date);
    }
    
    private String getDoubleFormat(double input) {
        return String.format("%.2f", input);
    }

    
    private String getSizeFormatted(long length){
        if(length <= 1024L){
            return String.valueOf(length) + " B";
        }else if(((double) length / 1024d) <= 1024L){
            return getDoubleFormat((double) length / 1024d) + " KB";
        }else if(((double) length / 1024d / 1024d) <= 1024L){
            return getDoubleFormat((double) length / 1024d / 1024d) + " MB";
        }else if(((double) length / 1024d / 1024d / 1024d) <= 1024L){
            return getDoubleFormat((double) length / 1024d / 1024d / 1024d) + " GB";
        }else if(((double) length / 1024d / 1024d / 1024d / 1024d) <= 1024L){
            return getDoubleFormat((double) length / 1024d / 1024d / 1024d / 1024d) + " TB";
        }else{
            return "unspecified " + length + " bytes";
        }
    }
    
    private long getFolderSize(File directory){
        long length = 0;
        for (File file : directory.listFiles()) {
            if (file.isFile())
                length += file.length();
            else
                length += getFolderSize(file);
        }
        return length;
    }
    
    private void clear(){
        filePath.setText("");
        nameLabel.setText("");
        lastChangeLabel.setText("");
        sizeLabel.setText("");
        authorLabel.setText("");
        isHiddenLabel.setText("");
        permissionsLabel.setText("");
        readPermissionLabel.setText("");
        writePermissionLabel.setText("");
        executePermissionLabel.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel authorLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton executeButton;
    private javax.swing.JLabel executePermissionLabel;
    private javax.swing.JTextField filePath;
    private javax.swing.JLabel isHiddenLabel;
    private javax.swing.JLabel lastChangeLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton openButton;
    private javax.swing.JButton openParentFolderButton;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JLabel permissionsLabel;
    private javax.swing.JLabel readPermissionLabel;
    private javax.swing.JButton selectButton;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JLabel writePermissionLabel;
    // End of variables declaration//GEN-END:variables
}
